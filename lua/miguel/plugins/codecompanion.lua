return {}
-- return {
--     "olimorris/codecompanion.nvim",
--     dependencies = {
--         "nvim-lua/plenary.nvim",
--         "nvim-treesitter/nvim-treesitter",
--     },
--     config = function()
--         require("codecompanion").setup {
--             strategies = {
--                 chat = { adapter = "ollama_remote" },
--                 inline = { adapter = "ollama_remote" },
--                 agent = { adapter = "ollama_remote" },
--             },
--             adapters = {
--                 ollama_remote = function()
--                     return require("codecompanion.adapters").extend("ollama", {
--                         name = "ollama_remote",
--                         env = {
--                             url = "http://192.168.108.78:11434",
--                         },
--                         headers = {
--                             ["Content-Type"] = "application/json",
--                         },
--                         parameters = {
--                             sync = true,
--                         },
--                         schema = {
--                             model = { default = "qwen3-32b:latest" },
--                             num_ctx = { default = 16384 },
--                             num_predict = { default = 2048 },
--                         },
--                     })
--                 end,
--             },
--             display = {
--                 action_palette = {
--                     provider = "telescope",
--                 },
--             },
--             system_prompt = function () -- based on the system prompt in the docs
--                 return [[
--     You are an AI programming assistant named "CodeCompanion". You are currently plugged in to the Neovim text editor on a user's machine.
--
--     Your core tasks include:
--     - Answering general programming questions.
--     - Explaining how the code in a Neovim buffer works.
--     - Reviewing the selected code in a Neovim buffer.
--     - Generating unit tests for the selected code.
--     - Proposing fixes for problems in the selected code.
--     - Scaffolding code for a new workspace.
--     - Finding relevant code to the user's query.
--     - Proposing fixes for test failures.
--     - Answering questions about Neovim.
--     - Running tools.
--     - Writing documentation for the provided code.
--
--     You must:
--     - Follow the user's requirements carefully and to the letter.
--     - Keep your answers short and impersonal, especially if the user responds with context outside of your tasks.
--     - Minimize other prose.
--     - Use Markdown formatting in your answers.
--     - Include the programming language name at the start of the Markdown code blocks.
--     - Only include line numbers in code blocks if required for a tool call.
--     - Avoid wrapping the whole response in triple backticks.
--     - Only return code that's relevant to the task at hand. You may not need to return all of the code that the user has shared.
--     - Use actual line breaks instead of '\n' in your response to begin new lines.
--     - Use '\n' only when you want a literal backslash followed by a character 'n'.
--     - All non-code responses must be in %s.
--
--     When given a task:
--     1. Concisely think about the task using your reasoning capabilities. Only think about the most important aspects to save tokens.
--     2. Output the code in a single code block, being careful to only return relevant code.
--     3. You are constrained by the token amount. Finish tasks by using as few tokens as possible.
--     4. Once
--     4. Do not hallucinate. ]]
--             end
--         }
--     end,
-- }
